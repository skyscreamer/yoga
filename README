Yoga enables relational queries on existing REST implementations to accelerate query performance and development time.

Wiki
----
https://github.com/skyscreamer/yoga/wiki

Inspiration
-----------
LinkedInâ€™s JavaOne presentation on building flexible REST interfaces (http://blog.linkedin.com/2009/07/08/brandon-duncan-java-one-building-consistent-restful-apis-in-a-high-performance-environment/)

Can You Explain in English?
---------------------------
Imagine there's a RESTful API to a music-based social network site, and you want to find out some songs your friends' would like.  Depending on the data model, a traditional RESTful approach might take several steps:

1) Get my friends
2) Get their favorite artists
3) Get those artists' albums
4) Get the songs from the albums

This can end up being a LOT of queries.  Yoga let's you do the same with a *single* query (without rewriting your existing API):

    GET /user/1.json?selector=:(friends:(favoriteArtists:(albums:(songs))))

View a more detailed explanation of our selectors here: https://github.com/skyscreamer/yoga/wiki/REST-Selectors

In short:

    Advantage               Gets you
    ----------              --------
    Fewer requests          Less total latency, ie faster overall response
    Fewer sockets           Better hardware capacity
    Simpler client code     Happier client develoeprs

How Do I Use It?
----------------
We currently support:
 + RESTEasy
 + Any RESTful Spring MVC application

Yoga provides the additional plumbing you need.  To wire it up, you'll just need to add some annotations and a few lines of configuration.

If you find the Yoga approach as useful as we do, we provide a lot of handy patterns to simplify adding your own extensions to its capabilities.

Once Yoga has been set up, clients can build and modify their own relational queries without any server-side programming.

Yoga is created by:
Carter Page (carter@skyscreamer.org)
Corby Page (corby@skyscreamer.org)
Solomon Duskis (solomon@skyscreamer.org)
... and contributors like you!
